{"version":3,"sources":["components/searchComponent.js","components/homeComponent.js","components/movieComponent.js","components/movieListingComponent.js","components/searchResultsComponent.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","useState","title","setTitle","handleSubmit","handleSendRequest","useEffect","undefined","movieSearchResults","length","history","push","className","placeholder","type","onKeyPress","e","key","onChange","event","preventDefault","target","value","onClick","Home","style","backgroundImage","movie","getMovieByName","Movie","Actors","Awards","BoxOffice","Country","DVD","Director","Genre","Language","Metascore","Plot","Poster","Production","Rated","Released","Runtime","Response","Title","Type","Website","Writer","Year","imdbRating","imdbVotes","to","resetSearch","alt","src","MovieListing","movieListing","imdbID","selectMovie","height","gridAutoRows","map","App","setMovieSearchResults","setMovie","axios","then","response","data","Search","catch","error","console","log","path","selectedMovie","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kTAkCeA,eA9BA,SAACC,GAAW,IAAD,EACIC,mBAAS,IADb,mBACfC,EADe,KACRC,EADQ,KAShBC,EAAe,WACjBJ,EAAMK,kBAAkBH,GACxBC,EAAS,KAOb,OAJAG,qBAAU,WAAO,IAAD,EACZ,QAAiCC,IAA7BP,EAAMQ,qBAAoC,UAAAR,EAAMQ,0BAAN,eAA0BC,SAAU,EAAG,OAAOT,EAAMU,QAAQC,KAAK,aAChH,CAACX,EAAMQ,qBAGN,yBAAKI,UAAU,iBACX,2BAAOC,YAAY,4BAA4BC,KAAK,OAAOC,WAAY,SAACC,GACpE,GAAc,UAAVA,EAAEC,IAAiB,OAAOb,KAC/Bc,SAnBc,SAACC,GACtBA,EAAMC,iBACN,IAAMlB,EAAQiB,EAAME,OAAOC,MAC3BnB,EAASD,IAgB0BU,UAAU,4CAA4CU,MAAOpB,IAC5F,2BAAOY,KAAK,SAASS,QAASnB,EACvBQ,UAAU,0GACVU,MAAM,eCLVE,EArBF,SAACxB,GAEd,OACI,oCACA,yBAAKY,UAAU,oEAAoEa,MAAO,CAACC,gBAAiB,uHAC5G,yBAAKd,UAAU,uEACX,yBAAKA,UAAU,kCACX,wBAAIA,UAAU,6EAAd,2BAEA,wBAAIA,UAAU,4DAAd,qIACA,yBAAKA,UAAU,oDACnB,kBAAC,EAAD,CAASe,MAAO3B,EAAM2B,MAAOnB,mBAAoBR,EAAMQ,mBAAoBH,kBAAmBL,EAAM4B,uB,OC6C7FC,EAxDD,SAAC7B,GAAW,IAAD,EAE4LA,EAAM2B,MAAhNG,EAFc,EAEdA,OAAQC,EAFM,EAENA,OAAQC,EAFF,EAEEA,UAAWC,EAFb,EAEaA,QAASC,EAFtB,EAEsBA,IAAKC,EAF3B,EAE2BA,SAAUC,EAFrC,EAEqCA,MAAOC,EAF5C,EAE4CA,SAAUC,EAFtD,EAEsDA,UAAWC,EAFjE,EAEiEA,KAAMC,EAFvE,EAEuEA,OAAQC,EAF/E,EAE+EA,WAAYC,EAF3F,EAE2FA,MAAOC,EAFlG,EAEkGA,SAAoBC,GAFtH,EAE4GC,SAF5G,EAEsHD,SAASE,EAF/H,EAE+HA,MAAOC,EAFtI,EAEsIA,KAAMC,EAF5I,EAE4IA,QAASC,EAFrJ,EAEqJA,OAAQC,EAF7J,EAE6JA,KAAMC,EAFnK,EAEmKA,WAAYC,EAF/K,EAE+KA,UAGpM,OACI,oCACI,yBAAKxC,UAAU,2BACX,yBAAKA,UAAU,wCACX,kBAAC,IAAD,CAAMyC,GAAI,IAAK9B,QAASvB,EAAMsD,aAAa,wBACvC1C,UAAU,0EAD6B,4BAG3C,yBAAKA,UAAU,2DACX,yBAAKA,UAAU,6EACX,yBAAKA,UAAU,SAAS2C,IAAKT,EAAQ,WAAYU,IAAKhB,KAE1D,yBAAK5B,UAAU,iEACX,wBAAIA,UAAU,oCAAoCkC,EAAlD,KAA2DI,EAA3D,KACA,uBAAGtC,UAAU,6CAAb,UAA4DuC,EAA5D,MAA0E,0BACtEvC,UAAU,eAAewC,IAE7B,uBAAGxC,UAAU,8BAA8B8B,EAA3C,MAAqDE,EAArD,MAAiER,EAAjE,MAA2EO,GAE3E,uBAAG/B,UAAU,+BAA+B2B,GAE5C,uBAAG3B,UAAU,oCAAmC,0BAC5CA,UAAU,aADkC,aAAhD,IAC4CuB,GAC5C,uBAAGvB,UAAU,+BAA8B,0BAAMA,UAAU,aAAhB,YAA3C,IAAwFqC,GAExF,uBAAGrC,UAAU,+BAA8B,0BAAMA,UAAU,aAAhB,UAA3C,IAAsFkB,GACtF,uBAAGlB,UAAU,+BAA8B,0BAAMA,UAAU,aAAhB,WAA3C,IAAuFmB,GAEvF,uBAAGnB,UAAU,+BAA8B,0BACvCA,UAAU,aAD6B,eAA3C,IAC8CoB,GAC9C,uBAAGpB,UAAU,+BAA8B,0BAAMA,UAAU,aAAhB,YAA3C,IAAwFqB,GAExF,uBAAGrB,UAAU,+BAA8B,0BAAMA,UAAU,aAAhB,QAA3C,IAAoFsB,GACpF,uBAAGtB,UAAU,+BAA8B,0BACvCA,UAAU,aAD6B,aAA3C,IAC4CyB,GAC5C,uBAAGzB,UAAU,+BAA8B,0BACvCA,UAAU,aAD6B,cAA3C,IAC6C0B,GAC7C,uBAAG1B,UAAU,+BAA8B,0BACvCA,UAAU,aAD6B,eAA3C,IAC8C6B,GAC9C,uBAAG7B,UAAU,+BAA8B,0BAAMA,UAAU,aAAhB,SAA3C,IAAqFmC,GACrF,uBAAGnC,UAAU,0BAAyB,0BAAMA,UAAU,aAAhB,YAAtC,IAAmFoC,SClBhGS,EA1BM,SAACzD,GAAW,IAAD,EAEUA,EAAM0D,aAArCZ,EAFqB,EAErBA,MAAON,EAFc,EAEdA,OAAQU,EAFM,EAENA,KAAMS,EAFA,EAEAA,OAO5B,OACI,oCACI,kBAAC,IAAD,CAAMN,GAAI,IAAMM,GACZ,yBAAKpC,QARG,WAChBvB,EAAM4D,YAAYD,GAClB3D,EAAMsD,eAM6B1C,UAAU,wBACjC,yBAAKA,UAAU,kCAAkCa,MAAO,CAACoC,OAAQ,SAAUL,IAAKhB,EAC3Ee,IAAKT,EAAQ,aAClB,yBAAKlC,UAAU,2EACX,wBAAIA,UAAU,qCAAqCkC,GACnD,wBAAIlC,UAAU,cAAcsC,QCuCrCnD,eAtDO,SAACC,GAMnB,OAJAM,qBAAU,WAAO,IAAD,EACZ,IAAI,UAAAN,EAAM0D,oBAAN,eAAoBjD,QAAS,EAAG,OAAOT,EAAMU,QAAQC,KAAK,aAGvCJ,IAAvBP,EAAM0D,aAEF,yBAAK9C,UAAU,iCACX,yBAAKA,UAAU,kCACX,kBAAC,IAAD,CAAMyC,GAAI,IAAK9B,QAASvB,EAAMsD,aAAa,wBACvC1C,UAAU,2EAD6B,4BAI3C,yBAAKA,UAAU,8BAEX,kBAAC,EAAD,CAAQe,MAAO3B,EAAM2B,MAAOnB,mBAAoBR,EAAMQ,mBAC9CH,kBAAmBL,EAAM4B,kBAGrC,wBAAIhB,UAAU,mDAAd,uBAOR,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,kCACX,kBAAC,IAAD,CAAMyC,GAAI,IAAK9B,QAASvB,EAAMsD,aAAa,wBACvC1C,UAAU,2EAD6B,4BAI3C,yBAAKA,UAAU,8BAEX,kBAAC,EAAD,CAAQe,MAAO3B,EAAM2B,MAAOnB,mBAAoBR,EAAMQ,mBAC9CH,kBAAmBL,EAAM4B,kBAGrC,uBAAGhB,UAAU,uCAAb,WAA4DZ,EAAM0D,aAAajD,OAA/E,YAEA,yBAAKG,UAAU,2EAA2Ea,MAAO,CAACqC,aAAc,QAExG9D,EAAM0D,aAAaK,KAAI,SAACL,GACpB,OAAO,kBAAC,EAAD,CAAcA,aAAcA,EAAcE,YAAa5D,EAAM4D,YAC/CjC,MAAO3B,EAAM2B,MAAO2B,YAAatD,EAAMsD,uBC4C7EU,EAjFH,WAAO,IAAD,EACsC/D,mBAAS,IAD/C,mBACPO,EADO,KACayD,EADb,OAEYhE,mBAAS,IAFrB,mBAEP0B,EAFO,KAEAuC,EAFA,KAIRtC,EAAiB,SAAC1B,GACpBiE,IAAM,CACF,OAAU,MACV,IAAO,0DACP,QAAW,CACP,eAAgB,2BAChB,kBAAmB,iDACnB,iBAAkB,qDAClB,gBAAkB,GACnB,OAAU,CACT,KAAQ,IACR,EAAK,OACL,EAAKjE,KAGRkE,MAAK,SAACC,GACHJ,EAAsBI,EAASC,KAAKC,WAEvCC,OAAM,SAACC,GACJC,QAAQC,IAAIF,OAiClBnB,EAAc,WAChBW,EAAsB,KAG1B,OACI,kBAAC,IAAD,KAEI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOW,KAAM,IAAMjD,EAAMgC,QACrB,kBAAC,EAAD,CAAOhC,MAAOA,EAAO2B,YAAaA,KAEtC,kBAAC,IAAD,CAAOsB,KAAK,WACR,kBAAC,EAAD,CAAehD,eAAgBA,EAAgBgC,YAhB3C,SAACiB,GAzBA,IAACC,IA0BLD,EAzBbV,IAAM,CACF,OAAU,MACV,IAAO,0DACP,QAAW,CACP,eAAgB,2BAChB,kBAAmB,iDACnB,iBAAkB,qDAClB,gBAAkB,GACnB,OAAU,CACT,EAAKW,EACL,EAAK,UAGRV,MAAK,SAACC,GACHK,QAAQC,IAAIN,EAASC,MACrBJ,EAASG,EAASC,SAGrBE,OAAM,SAACC,GACJC,QAAQC,IAAIF,GACZC,QAAQC,IAAIG,OAqBOpB,aAAclD,EAAoBmB,MAAOA,EACzCnB,mBAAoBA,EAAoB8C,YAAaA,KAExE,kBAAC,IAAD,CAAOsB,KAAK,KACR,kBAAC,EAAD,CAAMhD,eAAgBA,EAAgBpB,mBAAoBA,EAAoBmB,MAAOA,QC1ErFoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMqB,c","file":"static/js/main.acdaf7ac.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {withRouter} from 'react-router-dom';\n\n\nconst Search = (props) => {\n    const [title, setTitle] = useState('')\n\n    const handleInputTitle = (event) => {\n        event.preventDefault()\n        const title = event.target.value\n        setTitle(title)\n    }\n\n    const handleSubmit = () => {\n        props.handleSendRequest(title)\n        setTitle('')\n    }\n\n    useEffect(() => {\n        if (props.movieSearchResults === undefined || props.movieSearchResults?.length >= 1) return props.history.push('/search')\n    }, [props.movieSearchResults])\n\n    return (\n        <div className=\"flex-row flex\">\n            <input placeholder=\"Search Movies or TV Shows\" type=\"text\" onKeyPress={(e: any) => {\n                if (e.key === \"Enter\") return handleSubmit()\n            }} onChange={handleInputTitle} className=\"w-3/4 flex-auto px-6 text-xs sm:text-base\" value={title}/>\n            <input type=\"button\" onClick={handleSubmit}\n                   className=\"cursor-pointer flex-auto bg-blue-500 hover:bg-blue-700 text-white font-sans font-bold py-2 px-4 rounded\"\n                   value=\"Search\"/>\n        </div>\n    )\n}\n\nexport default withRouter(Search);\n","import Search from \"./searchComponent\";\nimport React from \"react\";\n\nconst Home = (props) => {\n\nreturn (\n    <>\n    <div className=\"overscroll-none bg-cover bg-center bg-no-repeat w-screen h-screen\" style={{backgroundImage: \"url(https://images.pexels.com/photos/436413/pexels-photo-436413.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=750&w=1260)\"}}>\n    <div className=\"w-screen h-screen bg-cover bg-black bg-opacity-75 flex items-center\">\n        <div className=\"container mx-auto px-4 xl:px-0\">\n            <h1 className=\"text-center text-3xl sm:text-6xl text-white uppercase font-bold font-sans\">Bailey's Media Database</h1>\n\n            <h4 className=\"text-center text-xs md:text-xl text-white font-sans mb-8\">A React web app that pulls data from the RapidAPI IMDB Movie Database built using React.js, React Router, TailwindCSS, and Axios.</h4>\n            <div className=\"bg-gray-900 px-4 py-4 sm:px-6 sm:py-8 rounded-md\">\n        <Search  movie={props.movie} movieSearchResults={props.movieSearchResults} handleSendRequest={props.getMovieByName}/>\n            </div>\n        </div>\n    </div>\n    </div>\n\n    </>\n)\n}\n\nexport default Home","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst Movie = (props) => {\n\n    const {Actors, Awards, BoxOffice, Country, DVD, Director, Genre, Language, Metascore, Plot, Poster, Production, Rated, Released, Response, Runtime, Title, Type, Website, Writer, Year, imdbRating, imdbVotes} = props.movie;\n\n\n    return (\n        <>\n            <div className=\"bg-gray-900 sm:h-screen\">\n                <div className=\"container mx-auto px-4 py-10 xl:px-0\">\n                    <Link to={\"/\"} onClick={props.resetSearch}><h1\n                        className=\"pb-2 text-xl sm:text-3xl text-white uppercase font-bold font-sans mb-2\">Bailey's Media\n                        Database</h1></Link>\n                    <div className=\"grid-cols-1 sm:grid-rows-3 sm:grid-cols-3 sm:gap-4 grid\">\n                        <div className=\"bg-gray-800 rounded-md p-4 col-span-1 row-end-1 inline-block mb-4 sm:mb-0\">\n                            <img className=\"w-full\" alt={Title + \"  poster\"} src={Poster}/>\n                        </div>\n                        <div className=\"bg-gray-800 rounded-md p-8 row-span-3 col-span-2 inline-block\">\n                            <h1 className=\"text-3xl lg:text-5xl text-white \">{Title} ({Year})</h1>\n                            <p className=\"text-white  text-lg sm:text-xl font-bold \">â˜… {imdbRating} - <span\n                                className=\"font-normal\">{imdbVotes}</span></p>\n\n                            <p className=\"text-white font-light mt-2\">{Rated} | {Runtime} | {Genre} | {Released}</p>\n\n                            <p className=\"text-white mt-4 font-normal\">{Plot}</p>\n\n                            <p className=\"text-white mt-4 font-normal mb-1\"><span\n                                className=\"font-bold\">Director:</span> {Director}</p>\n                            <p className=\"text-white font-normal mb-1\"><span className=\"font-bold\">Writers:</span> {Writer}\n                            </p>\n                            <p className=\"text-white font-normal mb-1\"><span className=\"font-bold\">Stars:</span> {Actors}</p>\n                            <p className=\"text-white font-normal mb-1\"><span className=\"font-bold\">Awards:</span> {Awards}\n                            </p>\n                            <p className=\"text-white font-normal mb-1\"><span\n                                className=\"font-bold\">Box Office:</span> {BoxOffice}</p>\n                            <p className=\"text-white font-normal mb-1\"><span className=\"font-bold\">Country:</span> {Country}\n                            </p>\n                            <p className=\"text-white font-normal mb-1\"><span className=\"font-bold\">DVD:</span> {DVD}</p>\n                            <p className=\"text-white font-normal mb-1\"><span\n                                className=\"font-bold\">Language:</span> {Language}</p>\n                            <p className=\"text-white font-normal mb-1\"><span\n                                className=\"font-bold\">Metascore:</span> {Metascore}</p>\n                            <p className=\"text-white font-normal mb-1\"><span\n                                className=\"font-bold\">Production:</span> {Production}</p>\n                            <p className=\"text-white font-normal mb-1\"><span className=\"font-bold\">Type:</span> {Type}</p>\n                            <p className=\"text-white font-normal\"><span className=\"font-bold\">Website:</span> {Website}\n                            </p>\n\n                        </div>\n                    </div>\n\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default Movie;","import React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst MovieListing = (props) => {\n\n    const {Title, Poster, Year, imdbID} = props.movieListing;\n\n    const selectMovie = () => {\n        props.selectMovie(imdbID);\n        props.resetSearch();\n    }\n\n    return (\n        <>\n            <Link to={\"/\" + imdbID} >\n                <div onClick={selectMovie} className=\"h-full flex flex-col\">\n                    <img className=\" w-full object-cover text-white\" style={{height: \"400px\"}} src={Poster}\n                         alt={Title + \"  poster\"}/>\n                    <div className=\"flex-auto h-auto bg-gray-800 rounded-md rounded-t-none p-4 self-stretch\">\n                        <h1 className=\"text-white text-xl font-semibold \">{Title}</h1>\n                        <h2 className=\"text-white\">{Year}</h2>\n                    </div>\n\n                </div>\n            </Link>\n        </>\n    )\n}\n\nexport default MovieListing;","import React, {useEffect} from 'react'\nimport MovieListing from \"./movieListingComponent\";\nimport {Link, withRouter} from \"react-router-dom\";\nimport Search from \"./searchComponent\";\n\nconst SearchResults = (props) => {\n\n    useEffect(() => {\n        if (props.movieListing?.length < 1) return props.history.push('/');\n    })\n\n    if (props.movieListing === undefined) {\n        return (\n            <div className=\"bg-gray-900 w-screen h-screen\">\n                <div className=\"container mx-auto px-4 xl-px-0\">\n                    <Link to={\"/\"} onClick={props.resetSearch}><h1\n                        className=\"pt-10 text-xl sm:text-3xl text-white uppercase font-bold font-sans mb-2\">Bailey's Media\n                        Database</h1></Link>\n\n                    <div className=\"bg-gray-800 p-4 rounded-md\">\n\n                        <Search movie={props.movie} movieSearchResults={props.movieSearchResults}\n                                handleSendRequest={props.getMovieByName}/>\n                    </div>\n\n                    <h2 className=\"text-center font-bold text-3xl text-white py-10\">No results found.</h2>\n\n                </div>\n            </div>\n        )\n    } else\n        return (\n            <div className=\"bg-gray-900 w-screen \">\n                <div className=\"container mx-auto px-4 xl:px-0\">\n                    <Link to={\"/\"} onClick={props.resetSearch}><h1\n                        className=\"pt-10 text-xl sm:text-3xl text-white uppercase font-bold font-sans mb-2\">Bailey's Media\n                        Database</h1></Link>\n\n                    <div className=\"bg-gray-800 p-4 rounded-md\">\n\n                        <Search movie={props.movie} movieSearchResults={props.movieSearchResults}\n                                handleSendRequest={props.getMovieByName}/>\n                    </div>\n\n                    <p className=\"mt-10 mb-2 font-semibold text-white\">Showing {props.movieListing.length} results</p>\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 xl:grid-cols-4 gap-4 items-stretch pb-10\" style={{gridAutoRows: \"1fr\"}}>\n                        {\n                            props.movieListing.map((movieListing) => {\n                                return <MovieListing movieListing={movieListing} selectMovie={props.selectMovie}\n                                                     movie={props.movie} resetSearch={props.resetSearch}/>\n                            })\n                        }\n                    </div>\n                </div>\n            </div>\n        )\n}\n\nexport default withRouter(SearchResults);\n","import React, {useState} from 'react';\nimport './App.css';\nimport './style.css';\nimport axios from 'axios'\nimport Home from \"./components/homeComponent\";\nimport {\n    BrowserRouter as Router,\n    Switch, Route\n} from \"react-router-dom\"\nimport Movie from \"./components/movieComponent\";\nimport SearchResults from \"./components/searchResultsComponent\";\n\n\nconst App = () => {\n    const [movieSearchResults, setMovieSearchResults] = useState([]);\n    const [movie, setMovie] = useState([]);\n\n    const getMovieByName = (title) => {\n        axios({\n            \"method\": \"GET\",\n            \"url\": \"https://movie-database-imdb-alternative.p.rapidapi.com/\",\n            \"headers\": {\n                \"content-type\": \"application/octet-stream\",\n                \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\",\n                \"x-rapidapi-key\": \"bd9484dfcdmsh0a55855d7a380f3p13dfb1jsnd453666912b6\",\n                \"useQueryString\": true\n            }, \"params\": {\n                \"page\": \"1\",\n                \"r\": \"json\",\n                \"s\": title\n            }\n        })\n            .then((response) => {\n                setMovieSearchResults(response.data.Search);\n            })\n            .catch((error) => {\n                console.log(error)\n            })\n    }\n\n    const getMovieByID = (id) => {\n        axios({\n            \"method\": \"GET\",\n            \"url\": \"https://movie-database-imdb-alternative.p.rapidapi.com/\",\n            \"headers\": {\n                \"content-type\": \"application/octet-stream\",\n                \"x-rapidapi-host\": \"movie-database-imdb-alternative.p.rapidapi.com\",\n                \"x-rapidapi-key\": \"bd9484dfcdmsh0a55855d7a380f3p13dfb1jsnd453666912b6\",\n                \"useQueryString\": true\n            }, \"params\": {\n                \"i\": id,\n                \"r\": \"json\"\n            }\n        })\n            .then((response) => {\n                console.log(response.data)\n                setMovie(response.data)\n\n            })\n            .catch((error) => {\n                console.log(error)\n                console.log(id)\n            })\n    }\n\n    const selectMovie = (selectedMovie) => {\n        getMovieByID(selectedMovie)\n    }\n\n    const resetSearch = () => {\n        setMovieSearchResults([])\n    }\n\n    return (\n        <Router>\n\n            <Switch>\n                <Route path={\"/\" + movie.imdbID}>\n                    <Movie movie={movie} resetSearch={resetSearch}/>\n                </Route>\n                <Route path=\"/search\">\n                    <SearchResults getMovieByName={getMovieByName} selectMovie={selectMovie}\n                                   movieListing={movieSearchResults} movie={movie}\n                                   movieSearchResults={movieSearchResults} resetSearch={resetSearch}/>\n                </Route>\n                <Route path=\"/\">\n                    <Home getMovieByName={getMovieByName} movieSearchResults={movieSearchResults} movie={movie}/>\n                </Route>\n            </Switch>\n\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}